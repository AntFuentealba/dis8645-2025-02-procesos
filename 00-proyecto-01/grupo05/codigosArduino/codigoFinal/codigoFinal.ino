// bibliotecas que se usarán en el código
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// se define el tamaño de la pantalla
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
// se define el pin de RESET de la pantalla
// en este caso el -1 significa que no hay botón RESET
#define OLED_RESET -1
// se define que 0x3C es la dirección de la pantalla
#define SCREEN_ADDRESS 0x3C
// se define que A3 es el potenciometro
#define potenciometro A3
// se crea y se inicia la pantalla OLED
Adafruit_SSD1306 display (SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// se declara la variable "velocidad" para que pueda ser usada más adelante
int velocidad; 

// se crea el array de bites que contiene la imagen
const unsigned char PROGMEM santiagoChile[] = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x5d, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x5d, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x5d, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xdd, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xdd, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xdd, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xdd, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xbe, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xe6, 0xbe, 0xbf, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0x7f, 0xe3, 0xf3, 0x1e, 0xbe, 0xbf, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf8, 0xff, 0x8f, 0x8f, 0xf8, 0xfe, 0xbe, 0xbf, 0xf9, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xc7, 0xff, 0xf0, 0x3f, 0xff, 0xfe, 0xbe, 0xbf, 0xfe, 0x41, 0xe1, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xbe, 0xbf, 0xff, 0x1f, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xbe, 0xbf, 0xff, 0xcf, 0xff, 0x9f, 0xff, 0xff, 0xff, 
	0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xbe, 0xbf, 0xff, 0xe3, 0xff, 0xe7, 0xfc, 0x07, 0xff, 
	0x1f, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xfe, 0xbe, 0xbf, 0xff, 0xf9, 0xff, 0xf8, 0x03, 0xf9, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf9, 0xf1, 0xfe, 0xbe, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xfe, 0x7f, 
	0xff, 0xff, 0xff, 0xff, 0xe7, 0xfe, 0x3e, 0xbe, 0xbf, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0x1f, 
	0xff, 0xff, 0x0f, 0xff, 0x9f, 0xff, 0xde, 0xbe, 0x8f, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xc7, 
	0xdf, 0xfc, 0xf0, 0xff, 0x7f, 0xff, 0xee, 0x7f, 0x37, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
	0xcf, 0xc3, 0xfe, 0x7c, 0x7f, 0xff, 0xfe, 0xff, 0xbb, 0x9f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x33, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xce, 0xff, 0xbf, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbe, 0xaa, 0xbf, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7e, 0xff, 0xbf, 0xff, 0xff, 0xdf, 0xff, 0xe0, 0x1f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xaa, 0xbf, 0xff, 0xff, 0xe7, 0xe0, 0x1f, 0xe7, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xb8, 0x00, 0x03, 0xff, 0x9f, 0xff, 0xf8, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xaa, 0xb7, 0xff, 0xfd, 0xfe, 0x7f, 0xff, 0xff, 0x0f, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xb5, 0x55, 0x55, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xaa, 0xb7, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xb5, 0x55, 0x55, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xaa, 0xb7, 0x00, 0x1d, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xfe, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xb6, 0xff, 0xe5, 0xff, 0xc1, 0xff, 0xff, 0xff, 
	0xfe, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xaa, 0xae, 0x06, 0x0d, 0xff, 0xbe, 0xff, 0xff, 0xff, 
	0xfe, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xaa, 0xff, 0xe5, 0xff, 0x88, 0xff, 0xff, 0xff, 
	0xfe, 0xf0, 0x0f, 0xcf, 0xff, 0xff, 0xfe, 0xaa, 0xae, 0x06, 0x0d, 0xff, 0xbe, 0xff, 0xff, 0xff, 
	0xe0, 0xef, 0xf7, 0x97, 0xff, 0xff, 0xfe, 0xff, 0xaa, 0xff, 0xe5, 0xff, 0x88, 0xff, 0xff, 0xff, 
	0x2e, 0xe1, 0x87, 0x6b, 0xff, 0xfc, 0x3e, 0xaa, 0xae, 0x06, 0x0d, 0xc3, 0xbe, 0xff, 0xff, 0xff, 
	0xae, 0xef, 0xf6, 0xf5, 0xfe, 0x7b, 0xde, 0xff, 0xaa, 0xff, 0xe5, 0xbc, 0x88, 0xff, 0xff, 0xff, 
	0x06, 0xe1, 0x86, 0x01, 0xfd, 0x82, 0x5e, 0xaa, 0xae, 0x06, 0x0d, 0xbc, 0x3e, 0xff, 0xff, 0x83, 
	0xfa, 0xef, 0xf6, 0xf5, 0xfd, 0xbb, 0xde, 0xff, 0xaa, 0xff, 0xed, 0xbb, 0xd8, 0xe7, 0xef, 0x79, 
	0x7a, 0xe1, 0x86, 0x54, 0x03, 0xda, 0x5e, 0xaa, 0xae, 0xff, 0x80, 0x17, 0xee, 0xeb, 0xd6, 0xf8, 
	0xe0, 0xef, 0xf0, 0xf5, 0xf2, 0xdb, 0xde, 0xff, 0x0e, 0xff, 0x7f, 0xe7, 0xe8, 0xc1, 0x00, 0x67, 
	0x5e, 0xe1, 0x86, 0x55, 0xfb, 0xda, 0x5e, 0xaa, 0xf0, 0x00, 0x55, 0x47, 0xe6, 0xbe, 0x77, 0xaf, 
	0xd4, 0xef, 0xf6, 0xf5, 0xfa, 0xc1, 0xde, 0xfe, 0xff, 0x99, 0x7f, 0xe1, 0xf0, 0xaa, 0xf7, 0x03, 
	0x5e, 0xe1, 0x86, 0x55, 0x9b, 0xdc, 0x1e, 0xaa, 0xaa, 0xff, 0x55, 0x4e, 0xf6, 0xbe, 0xf6, 0x7d, 
	0xd4, 0xef, 0xf6, 0xc0, 0x0b, 0x0f, 0xc2, 0xfe, 0xff, 0xff, 0x1f, 0xee, 0xe6, 0x2c, 0xf6, 0xfd, 
	0xde, 0xe1, 0x86, 0xbf, 0xc0, 0x75, 0x7c, 0x1e, 0xaa, 0x80, 0x61, 0x4e, 0xef, 0x38, 0x00, 0x0d, 
	0x00, 0xef, 0xf0, 0x2a, 0xbe, 0x77, 0xfd, 0xee, 0xff, 0x7e, 0xfb, 0xfe, 0xc9, 0xb7, 0xff, 0xf5, 
	0xff, 0x61, 0x87, 0xbf, 0xfe, 0xf5, 0x70, 0xe0, 0xaa, 0x7e, 0xfb, 0xfe, 0xdf, 0xb5, 0x56, 0x35, 
	0x35, 0x5e, 0xf7, 0xb1, 0x9e, 0xf7, 0xe7, 0x6e, 0x1f, 0x00, 0x00, 0x00, 0x19, 0x96, 0x7d, 0xd5, 
	0x8f, 0x5e, 0x9e, 0x2e, 0x64, 0x77, 0x0f, 0x6c, 0xce, 0xff, 0xff, 0xff, 0xef, 0xd5, 0xbb, 0xe5, 
	0xe5, 0x5e, 0x6d, 0xaf, 0x7b, 0xb4, 0xe7, 0x6d, 0xe6, 0xaf, 0x7c, 0x7e, 0xa9, 0xd3, 0xdb, 0xe5, 
	0xf7, 0x5e, 0xf3, 0xcf, 0x7b, 0x95, 0xfb, 0x6d, 0xf6, 0xfe, 0xbb, 0xbf, 0xef, 0xd3, 0xdb, 0xe5
};

void setup () {
  
  // inicia la pantalla OLED
   display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS); 
  // limpia la pantalla antes de dibujar.
    display.clearDisplay();
  // define el tamaño del texto.
    display.setTextSize(1); 
  // define el color del texto.
    display.setTextColor(WHITE); 
}

  // da comienzo al loop
void loop() {

  // se dice que la variable "velocidad" leera el "potenciometro"
    velocidad = analogRead(potenciometro);

  // se determina con map que los valores de "potenciometro" 
  // sean adaptados a la velociaad que se mueve el texto
  // el "0, 1013" definen el rango del potenciometro (input)
  // y se conviertetn a "0, 100" que será la velocidad (output) 
    velocidad = map(velocidad, 0, 1023, 0, 100); 

  // "i = 0", se crea la variable i que empieza contando desde 0
  // "i < SCREEN_HEIGHT *5" el ciclo sigue mientras "i" sea menor a "SCREEN_HEIGHT por (*) 5"
  // " i += 2" cada vuelta "i" aumenta de 2 en 2
 for (int i = 0; i < SCREEN_HEIGHT *6; i += 2) {
  // se limpia la pantalla
    display.clearDisplay();

  // se determina que el texto vaya suiendo
  // "0" define el valor del eje X
  // "SCREEN_HEIGHT - i" define el valor del eje Y
  // que en este caso es el tamano de la pantalla
  // menos la variable "i" que va cambiando el el tiempo
  // lo cual genera que el texto inicie abajo y vaya subiendo
    display.setCursor(0, SCREEN_HEIGHT - i);

  // la pantalla imprime el primer verso del poema
  // la "F" le dice a Arduino que guarde el verso en el programa,
  // no en su memoria interna
    display.println(F("En Santiago de Chile"));
    display.println(F(""));
    display.println(F("los dias son"));
    display.println(F(""));
    display.println(F("interminablemente."));
    display.println(F(""));
    display.println(F("largos."));
		display.println(F(""));
    display.println(F(""));
    display.println(F(""));
    display.println(F(""));
		display.println(F(""));
    display.println(F(""));
    display.println(F(""));
		display.println(F(""));
    display.println(F(""));
    display.println(F("Varias eternidades"));
    display.println(F(""));
    display.println(F("en un dia."));
    display.println(F(""));
    display.println(F("Nos desplazamos"));
    display.println(F(""));
    display.println(F("a lomo de luma")); 
    display.println(F(""));
    display.println(F("Como los vendedores"));
    display.println(F(""));
    display.println(F("de cochayuyo:"));
    display.println(F(""));
    display.println(F("Se bosteza."));
    display.println(F(""));
    display.println(F("Se vuelve a bostezar."));
		display.println(F(""));
		display.println(F(""));
    display.println(F("Cornos-Nicanor Parra"));
		display.println(F(""));

  // ajusta el retraso de velocidad del scroll segun fue designado en el for
    delay(velocidad); 
    
  // "0" define la posición en el eje X desde donde aparecerá
  // "SCREEN_HEIGHT - i + SCREEN_HEIGHT" define la posición en el eje Y
  // al inicio la imagen está fuera de la pantalla, mientras "i" aumenta,
  // la imagen va subiendo a la pantalla haciendo un efecto de scroll
  // "santiagoChile" llama al array de la imagen
  // "128, 64" define el ancho y el alto de la imagen
  // "WHITE" define el color de la imagen
  display.drawBitmap(0, SCREEN_HEIGHT - i + SCREEN_HEIGHT, santiagoChile, 128, 64, WHITE);
  // se llama a la pantalla para que muestre lo que se menciono
display.display();
  // establece la velocidad a la que aparecera la imagen
delay(velocidad);
  }
}
